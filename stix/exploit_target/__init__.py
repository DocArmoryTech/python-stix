# Copyright (c) 2015, The MITRE Corporation. All rights reserved.
# See LICENSE.txt for complete terms.

# internal
import stix
import stix.utils as utils
import stix.bindings.exploit_target as exploit_target_binding
from stix.common.related import (
    GenericRelationshipList, RelatedCOA, RelatedExploitTarget,
    RelatedPackageRefs
)
from stix.common import StructuredText, InformationSource
from stix.data_marking import Marking

# relative
from .vulnerability import Vulnerability, _Vulnerabilities
from .weakness import Weakness, _Weaknesses
from .configuration import Configuration, _Configurations


class ExploitTarget(stix.Entity):
    """Implementation of STIX ``ExploitTarget``.

    Args:
        id_ (optional): An identifier. If ``None``, a value will be generated
            via ``stix.utils.create_id()``. If set, this will unset the
            ``idref`` property.
        idref (optional): An identifier reference. If set this will unset the
            ``id_`` property.
        title (optional): A string title.
        timestamp (optional): A timestamp value. Can be an instance of
            ``datetime.datetime`` or ``str``.
        description (optional): A string description.
        short_description (optional): A string short description.

    """
        
    _binding = exploit_target_binding
    _binding_class = _binding.ExploitTargetType
    _namespace = "http://stix.mitre.org/ExploitTarget-1"
    _version = "1.1.1"
    _ALL_VERSIONS = ("1.0", "1.0.1", "1.1", "1.1.1")

    def __init__(self, id_=None, idref=None, timestamp=None, title=None, description=None, short_description=None):
        self.id_ = id_ or utils.create_id("et")
        self.idref = idref
        self.version = None
        self.title = title
        self.description = description
        self.short_description = short_description
        self.information_source = None
        self.handling = None
        self.potential_coas = PotentialCOAs()
        self.related_exploit_targets = RelatedExploitTargets()
        self.vulnerabilities = None
        self.weaknesses = None
        self.configuration = None
        self.related_packages = RelatedPackageRefs()
        
        if timestamp:
            self.timestamp = timestamp
        else:
            self.timestamp = utils.dates.now() if not idref else None
            
    @property
    def id_(self):
        """The ``id_`` property for this :class:`ExploitTarget` which serves as
        an identifier. This is automatically set during ``__init__()``.

        Default Value: ``None``

        Note:
            The :class:`ExploitTarget` class cannot have both its ``id_`` and
            ``idref`` properties set at the same time. As such, setting the
            ``idref`` property will unset the ``id_`` property and setting
            the ``id_`` property will unset the ``idref`` property.

        Returns:
            A string id.

        """
        return self._id
    
    @id_.setter
    def id_(self, value):
        if not value:
            self._id = None
        else:
            self._id = value
            self.idref = None
    
    @property
    def version(self):
        """The ``version`` property of this :class:`ExploitTarget`. This property
        will always return ``None`` unless it is set to a value different than
        ``ExploitTarget._version``.

        Note:
            This property refers to the version of the ``ExploitTarget`` schema
            type and should not be used for the purpose of content versioning.

        Default Value: ``None``

        Returns:
            The value of the ``version`` property if set to a value different
            than ``ExploitTarget._version``

        """
        
        return self._version
    
    @version.setter
    def version(self, value):
        if not value:
            self._version = None
        else:
            utils.check_version(self._ALL_VERSIONS, value)
            self._version = value
    
    @property
    def idref(self):
        """The ``idref`` property for this :class:`ExploitTarget`.

        The ``idref`` property must be set to the ``id_`` value of another
        :class:`ExploitTarget` instance. An idref does not need to resolve to a
        local :class:`ExploitTarget` instance.

        Default Value: ``None``.

        Note:
            The :class:`ExploitTarget` class cannot have both its ``id_`` and
            ``idref`` properties set at the same time. As such, setting the
            ``idref`` property will unset the ``id_`` property and setting
            the ``id_`` property will unset the ``idref`` property.

        Returns:
            The value of the ``idref`` property

        """
        return self._idref
    
    @idref.setter
    def idref(self, value):
        if not value:
            self._idref = None
        else:
            self._idref = value
            self.id_ = None # unset id_ if idref is present
    
    @property
    def timestamp(self):
        """The ``timestamp`` propety for this :class:`ExploitTarget` instance. This
        property declares the time of creation and is automatically set in
        ``__init__()``.

        This property can accept ``datetime.datetime`` or ``str`` values.
        If an ``str`` value is supplied, a best-effort attempt is made to
        parse it into an instance of ``datetime.datetime``.

        Default Value: A ``datetime.dateime`` instance with a value of the
        date/time when ``__init__()`` was called.

        Note:
            If an ``idref`` is set during ``__init__()``, the value of
            ``timestamp`` will not automatically generated and instead default
            to the ``timestamp`` parameter, which has a default value of
            ``None``.

        Returns:
            An instance of ``datetime.datetime``.

        """
        
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        self._timestamp = utils.dates.parse_value(value)

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, value):
        self._title = value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, value):
        """The ``description`` property for this :class:`ExploitTarget`.

        Default Value: ``None``

        Note:
            If set to a value that is not an instance of
            :class:`stix.common.structured_text.StructuredText`, an attempt to
            will be made to convert the value into an instance of
            :class:`stix.common.structured_text.StructuredText`.

        Returns:
            An instance of
            :class:`stix.common.structured_text.StructuredText`

        """
        if value:
            if isinstance(value, StructuredText):
                self._description = value
            else:
                self._description = StructuredText(value=value)
        else:
            self._description = None

    @property
    def short_description(self):
        """The ``short_description`` property for this :class:`ExploitTarget`.

        Default Value: ``None``

        Note:
            If set to a value that is not an instance of
            :class:`stix.common.structured_text.StructuredText`, an attempt to
            will be made to convert the value into an instance of
            :class:`stix.common.structured_text.StructuredText`.

        Returns:
            An instance of
            :class:`stix.common.structured_text.StructuredText`

        """

        return self._short_description

    @short_description.setter
    def short_description(self, value):
        if value:
            if isinstance(value, StructuredText):
                self._short_description = value
            else:
                self._short_description = StructuredText(value=value)
        else:
            self._short_description = None

    @property
    def information_source(self):
        """Contains information about the source of the :class:`ExploitTarget`.

        Default Value: ``None``

        Returns:
            An instance of
            :class:`stix.common.information_source.InformationSource`

        Raises:
            ValueError: If set to a value that is not ``None`` and not an
                instance of
                :class:`stix.common.information_source.InformationSource`

        """
        
        return self._information_source
    
    @information_source.setter
    def information_source(self, value):
        if not value:
            self._information_source = None
        elif isinstance(value, InformationSource):
            self._information_source = value
        else:
            raise ValueError('value must be instance of InformationSource')

    @property
    def handling(self):
        
        return self._handling

    @handling.setter
    def handling(self, value):
        if value and not isinstance(value, Marking):
            raise ValueError('value must be instance of Marking')

        self._handling = value
 
    @property
    def vulnerabilities(self):
        """A list of ``Vulnerability`` objects 
        
        Default Value: ``None``

        Returns:
            A list of
            :class:`stix.exploit_target.vulnerability`

        Raises:
            ValueError: If set to a value that is not ``None`` and not an
                instance of
                :class:`stix.exploit_target.vulnerability`

        """
        
        return self._vulnerabilities
    
    @vulnerabilities.setter
    def vulnerabilities(self, value):
        self._vulnerabilities = _Vulnerabilities(value)

    def add_vulnerability(self, v):
        """Adds a vulnerability to the ``vulnerabilies`` list property.

        Note:
            If ``None`` is passed in no value is added 

        Args:
            v: A Vulnerability value.
            
        Raises: ValueError if the ``v`` param is of type :class:`stix.exploit_target.vulnerability`
    

        """
        self.vulnerabilities.append(v)
 
    @property
    def weaknesses(self):
        """A list of ``Weakness`` objects 
        
        Default Value: ``None``

        Returns:
            A list of
            :class:`stix.exploit_target.weakness`

        Raises:
            ValueError: If set to a value that is not ``None`` and not an
                instance of
                :class:`stix.exploit_target.weakness`

        """
        
        return self._weaknesses
    
    @weaknesses.setter
    def weaknesses(self, value):
        self._weaknesses = _Weaknesses(value)
            
    def add_weakness(self, v):
        """Adds a weakness to the ``weaknesses`` list property.

        Note:
            If ``None`` is passed in no value is added 

        Args:
            v: A weakness value.
            
        Raises: ValueError if the ``v`` param is of type :class:`stix.exploit_target.weakness`
    

        """
        self.weaknesses.append(v)
 
    @property
    def configuration(self):
        """A list of ``Configuration`` objects 
        
        Default Value: ``None``

        Returns:
            A list of
            :class:`stix.exploit_target.configuration`

        Raises:
            ValueError: If set to a value that is not ``None`` and not an
                instance of
                :class:`stix.exploit_target.configuration`

        """
        
        return self._configuration
    
    @configuration.setter
    def configuration(self, value):
        self._configuration = _Configurations(value)

    def add_configuration(self, v):
        """Adds a configuration to the ``configurations`` list property.

        Note:
            If ``None`` is passed in no value is added 

        Args:
            v: A configuration value.
            
        Raises: ValueError if the ``v`` param is of type :class:`stix.exploit_target.configuration`

        """
        self.configuration.append(v)
 
    def to_obj(self, return_obj=None, ns_info=None):
        super(ExploitTarget, self).to_obj(return_obj=return_obj, ns_info=ns_info)

        if not return_obj:
            return_obj = self._binding_class()

        return_obj.id = self.id_
        return_obj.idref = self.idref
        return_obj.timestamp = utils.dates.serialize_value(self.timestamp)
        return_obj.version = self.version
        return_obj.Title = self.title

        if self.description:
            return_obj.Description = self.description.to_obj(ns_info=ns_info)
        if self.short_description:
            return_obj.Short_Description = self.short_description.to_obj(ns_info=ns_info)
        if self.information_source:
            return_obj.Information_Source = self.information_source.to_obj(ns_info=ns_info)
        if self.handling:
            return_obj.Handling = self.handling.to_obj(ns_info=ns_info)
        if self.potential_coas:
            return_obj.Potential_COAs = self.potential_coas.to_obj(ns_info=ns_info)
        if self.related_exploit_targets:
            return_obj.Related_Exploit_Targets = self.related_exploit_targets.to_obj(ns_info=ns_info)
        if self.vulnerabilities:
            return_obj.Vulnerability = self.vulnerabilities.to_obj(ns_info=ns_info)
        if self.weaknesses:
            return_obj.Weakness = self.weaknesses.to_obj(ns_info=ns_info)
        if self.configuration:
            return_obj.Configuration = self.configuration.to_obj(ns_info=ns_info)
        if self.related_packages:
            return_obj.Related_Packages = self.related_packages.to_obj(ns_info=ns_info)
            
        return return_obj

    @classmethod
    def from_obj(cls, obj, return_obj=None):
        if not obj:
            return None
        if not return_obj:
            return_obj = cls()

        return_obj.id_ = obj.id
        return_obj.idref = obj.idref
        return_obj.timestamp = obj.timestamp # not yet implemented

        if isinstance(obj, cls._binding_class): # TTPType properties
            return_obj.version = obj.version
            return_obj.title = obj.Title
            return_obj.description = StructuredText.from_obj(obj.Description)
            return_obj.short_description = StructuredText.from_obj(obj.Short_Description)
            return_obj.information_source = InformationSource.from_obj(obj.Information_Source)
            return_obj.handling = Marking.from_obj(obj.Handling)
            return_obj.potential_coas = PotentialCOAs.from_obj(obj.Potential_COAs)
            return_obj.related_exploit_targets = RelatedExploitTargets.from_obj(obj.Related_Exploit_Targets)
            return_obj.vulnerabilities = _Vulnerabilities.from_obj(obj.Vulnerability)
            return_obj.weaknesses = _Weaknesses.from_obj(obj.Weakness)
            return_obj.configuration = _Configurations.from_obj(obj.Configuration)
            return_obj.related_packages = RelatedPackageRefs.from_obj(obj.Related_Packages)

        return return_obj

    def to_dict(self):
        return super(ExploitTarget, self).to_dict()


    @classmethod
    def from_dict(cls, dict_repr, return_obj=None):
        if not dict_repr:
            return None
        if not return_obj:
            return_obj = cls()

        get = dict_repr.get

        return_obj.id_ = get('id')
        return_obj.idref = get('idref')
        return_obj.timestamp = get('timestamp')
        return_obj.version = get('version')
        return_obj.title = get('title')
        return_obj.description = StructuredText.from_dict(get('description'))
        return_obj.short_description = StructuredText.from_dict(get('short_description'))
        return_obj.information_source = InformationSource.from_dict(get('information_source'))
        return_obj.handling = Marking.from_dict(get('handling'))
        return_obj.potential_coas = PotentialCOAs.from_dict(get('potential_coas'))
        return_obj.related_exploit_targets = RelatedExploitTargets.from_dict(get('related_exploit_targets'))
        return_obj.vulnerabilities = _Vulnerabilities.from_dict(get('vulnerabilities'))
        return_obj.weaknesses = _Weaknesses.from_dict(get('weaknesses'))
        return_obj.configuration = _Configurations.from_dict(get('configuration'))
        return_obj.related_packages = RelatedPackageRefs.from_dict(get('related_packages'))
        
        return return_obj

class PotentialCOAs(GenericRelationshipList):
    """
    A list of ``Potential_COA`` objects, defaults to empty array
    """
    _namespace = "http://stix.mitre.org/ExploitTarget-1"
    _binding = exploit_target_binding
    _binding_class = exploit_target_binding.PotentialCOAsType
    _binding_var = "Potential_COA"
    _contained_type = RelatedCOA
    _inner_name = "coas"

    def __init__(self, coas=None, scope=None):
        if coas is None:
            coas = []
        super(PotentialCOAs, self).__init__(scope, *coas)


class RelatedExploitTargets(GenericRelationshipList):
    """
    A list of ``RelatedExploitTargets`` objects, defaults to empty array
    """
    _namespace = "http://stix.mitre.org/ExploitTarget-1"
    _binding = exploit_target_binding
    _binding_class = exploit_target_binding.RelatedExploitTargetsType
    _binding_var = "Related_Exploit_Target"
    _contained_type = RelatedExploitTarget
    _inner_name = "related_exploit_targets"

    def __init__(self, related_exploit_targets=None, scope=None):
        super(RelatedExploitTargets, self).__init__(scope, related_exploit_targets)

